{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _Spin from \"antd/lib/spin\";\nimport _List from \"antd/lib/list\";\nimport _Breadcrumb from \"antd/lib/breadcrumb\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Header from '../components/Header';\nimport Aurhor from '../components/Author';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport marked from 'marked';\nimport servicePath from '../config/api';\nimport '../public/style/pages/list.css';\nimport { CarryOutOutlined, YoutubeOutlined, FireOutlined } from '@ant-design/icons';\nimport CountUp from 'react-countup';\n\nvar myList = function myList(props) {\n  var _marked$setOptions;\n\n  var _useState = useState(props.data),\n      ilist = _useState[0],\n      setList = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1]; // const [isLoading, setIsLoading] = useState(true)\n\n\n  var renderer = new marked.Renderer();\n  marked.setOptions((_marked$setOptions = {\n    renderer: renderer,\n    gfm: true,\n    pedantic: false,\n    sanitize: false,\n    tables: true,\n    breaks: false,\n    smartLists: true,\n    smartypants: false\n  }, _defineProperty(_marked$setOptions, \"sanitize\", false), _defineProperty(_marked$setOptions, \"xhtml\", false), _marked$setOptions));\n\n  var goLoading = function goLoading() {\n    setLoading(true);\n  };\n\n  useEffect(function () {\n    setList(props.data);\n  }, [props.data]);\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"Home\")), __jsx(Header, null), __jsx(_Row, {\n    className: \"comm-main\",\n    justify: \"center\"\n  }, __jsx(_Col, {\n    className: \"comm-left\",\n    xs: 24,\n    sm: 24,\n    md: 16,\n    lg: 14,\n    xl: 12\n  }, __jsx(\"div\", {\n    className: \"bread-div\"\n  }, __jsx(_Breadcrumb, null, __jsx(_Breadcrumb.Item, null, __jsx(\"a\", {\n    href: \"/\"\n  }, \"\\u9996\\u9875\")), __jsx(_Breadcrumb.Item, null, Array.isArray(ilist) && ilist.length === 0 ? '算法' : ilist[0].typeName))), __jsx(_List, {\n    header: __jsx(\"div\", {\n      className: \"comm-title\"\n    }, Array.isArray(ilist) && ilist.length === 0 ? '博主正在加班加点的码字~' : ilist[0].typeName),\n    dataSource: ilist,\n    locale: {\n      emptyText: '博主正在加班加点的码字~'\n    },\n    itemLayout: \"vertical\",\n    split: true,\n    renderItem: function renderItem(item) {\n      return __jsx(_Spin, {\n        spinning: loading\n      }, __jsx(_List.Item, null, __jsx(\"div\", {\n        className: \"list-title\",\n        onClick: goLoading\n      }, __jsx(Link, {\n        href: {\n          pathname: '/detailed',\n          query: {\n            id: item.id\n          }\n        }\n      }, __jsx(\"a\", null, item.title))), __jsx(\"div\", {\n        className: \"list-icon\"\n      }, __jsx(\"span\", {\n        className: \"icon-time\"\n      }, __jsx(CarryOutOutlined, null), item.addTime), __jsx(\"span\", {\n        className: \"icon-category\"\n      }, __jsx(YoutubeOutlined, null), item.typeName), __jsx(\"span\", {\n        className: \"icon-numberpeople\"\n      }, __jsx(FireOutlined, null), __jsx(CountUp, {\n        end: item.view_count\n      }), \"\\u4EBA \")), __jsx(\"div\", {\n        className: \"list-context\",\n        dangerouslySetInnerHTML: {\n          __html: marked(item.introduce)\n        }\n      })));\n    }\n  })), __jsx(_Col, {\n    className: \"comm-right\",\n    xs: 0,\n    sm: 0,\n    md: 6,\n    lg: 6,\n    xl: 3\n  }, __jsx(Aurhor, null))));\n};\n\nmyList.getInitialProps = function _callee(context) {\n  var id, promise;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          promise = new Promise(function (resolve) {\n            axios(servicePath.getListById + id).then(function (res) {\n              return resolve(res.data);\n            });\n          });\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(promise);\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default myList;","map":null,"metadata":{},"sourceType":"module"}